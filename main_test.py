import sqlite3
import pandas as pd
import os
import time
from datetime import datetime
from langchain_core.messages import HumanMessage, SystemMessage
from authorization import authorization_gigachat
from prompt_builder import PromptBuilder
from sql_utils import extract_sql_query, execute_sql_safely, compare_sql_queries
from test_questions_and_queries import TEST_CASES, TEST_CATEGORIES


class SQLTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, db_path='freelancer_earnings.db', table_name='freelancer_earnings'):
        self.db_path = db_path
        self.table_name = table_name
        self.conn = None
        self.giga = None
        self.prompt_builder = None
        self.test_results = []

    def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞
        if not os.path.exists('freelancer_earnings_bd.csv'):
            print("‚ùå –§–∞–π–ª freelancer_earnings_bd.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False

        # –°–æ–∑–¥–∞–µ–º/–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        self.conn = sqlite3.connect(self.db_path)
        try:
            df = pd.read_csv('freelancer_earnings_bd.csv')
            df.to_sql(self.table_name, self.conn, if_exists='replace', index=False)
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PromptBuilder
        self.prompt_builder = PromptBuilder(self.db_path, self.table_name)
        if not self.prompt_builder.analyze_and_prepare():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GigaChat
        try:
            self.giga = authorization_gigachat()
            print("‚úÖ GigaChat –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat: {e}")
            return False

        return True

    def run_single_test(self, test_case):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç"""
        print(f"\nüìù –¢–µ—Å—Ç #{test_case['id']}: {test_case['question']}")

        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
        system_prompt = self.prompt_builder.build_enhanced_system_prompt()
        messages = [
            SystemMessage(content=system_prompt),
            HumanMessage(content=test_case['question'])
        ]

        start_time = time.time()

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            response = self.giga.invoke(messages)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º SQL
            generated_sql = extract_sql_query(response.content)
            execution_time = time.time() - start_time

            if not generated_sql:
                return self._create_result(test_case, None, 'no_sql_extracted',
                                           execution_time, '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å SQL', response.content)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
            expected_success, expected_result, _ = execute_sql_safely(self.conn, test_case['expected_sql'])
            generated_success, generated_result, _ = execute_sql_safely(self.conn, generated_sql)

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
            similarity_type, similarity_score = compare_sql_queries(
                generated_sql, test_case['expected_sql'], self.table_name
            )

            if generated_success:
                status = 'success'
                error = None
            else:
                status = 'sql_error'
                error = generated_result

            return self._create_result(test_case, generated_sql, status,
                                       execution_time, error, response.content,
                                       similarity_score, similarity_type)

        except Exception as e:
            return self._create_result(test_case, None, 'exception',
                                       time.time() - start_time, str(e))

    def _create_result(self, test_case, generated_sql, status, execution_time,
                       error=None, raw_response='', similarity_score=0, similarity_type=''):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞"""
        return {
            'test_id': test_case['id'],
            'question': test_case['question'],
            'category': test_case['category'],
            'expected_sql': test_case['expected_sql'],
            'generated_sql': generated_sql,
            'status': status,
            'similarity_score': similarity_score,
            'similarity_type': similarity_type,
            'execution_time': execution_time,
            'error': error,
            'raw_response': raw_response
        }

    def run_all_tests(self, test_cases=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        if test_cases is None:
            test_cases = TEST_CASES

        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤...")
        print("=" * 70)

        self.test_results = []

        for i, test_case in enumerate(test_cases, 1):
            print(f"\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(test_cases)}")
            result = self.run_single_test(test_case)
            self.test_results.append(result)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
            self._print_test_result(result)

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)

        return self.test_results

    def _print_test_result(self, result):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        if result['status'] == 'success':
            print(f"‚úÖ –£—Å–ø–µ—Ö (—Å—Ö–æ–¥—Å—Ç–≤–æ: {result['similarity_score']:.1f}%)")
        elif result['status'] == 'sql_error':
            print(f"‚ùå –û—à–∏–±–∫–∞ SQL: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        elif result['status'] == 'no_sql_extracted':
            print(f"‚ö†Ô∏è –ù–µ –∏–∑–≤–ª–µ—á–µ–Ω SQL")
        else:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        if not self.test_results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        print("\n" + "=" * 70)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("=" * 70)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(self.test_results)
        by_status = {}
        for result in self.test_results:
            status = result['status']
            by_status[status] = by_status.get(status, 0) + 1

        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {by_status.get('success', 0)} ({by_status.get('success', 0) / total * 100:.1f}%)")
        print(f"‚ùå –û—à–∏–±–∫–∏ SQL: {by_status.get('sql_error', 0)} ({by_status.get('sql_error', 0) / total * 100:.1f}%)")
        print(
            f"‚ö†Ô∏è –ù–µ –∏–∑–≤–ª–µ—á–µ–Ω SQL: {by_status.get('no_sql_extracted', 0)} ({by_status.get('no_sql_extracted', 0) / total * 100:.1f}%)")
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏—è: {by_status.get('exception', 0)} ({by_status.get('exception', 0) / total * 100:.1f}%)")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self._print_category_stats()

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self._print_average_metrics()

        # –î–µ—Ç–∞–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        self._print_failed_tests()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self._print_error_analysis()
        self._print_success_patterns()

    def _print_category_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        print(f"\nüìà –î–ï–¢–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")

        category_stats = {}
        category_errors = {}

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—à–∏–±–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for result in self.test_results:
            cat = result['category']
            test_id = result['test_id']
            status = result['status']

            if cat not in category_stats:
                category_stats[cat] = {'total': 0, 'success': 0, 'failed_tests': []}
                category_errors[cat] = {'sql_error': 0, 'no_sql_extracted': 0, 'exception': 0}

            category_stats[cat]['total'] += 1

            if status == 'success':
                category_stats[cat]['success'] += 1
            else:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω–æ–º —Ç–µ—Å—Ç–µ
                category_stats[cat]['failed_tests'].append({
                    'test_id': test_id,
                    'status': status,
                    'question': result['question'][:50] + "..." if len(result['question']) > 50 else result['question']
                })

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                if status in category_errors[cat]:
                    category_errors[cat][status] += 1

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        perfect_categories = []
        problematic_categories = []

        for category, stats in sorted(category_stats.items()):
            success_rate = stats['success'] / stats['total'] * 100
            cat_name = TEST_CATEGORIES.get(category, category)

            if success_rate == 100.0:
                perfect_categories.append((cat_name, stats))
                print(f"  ‚úÖ {cat_name}: {stats['success']}/{stats['total']} (100.0%)")
            else:
                problematic_categories.append((cat_name, stats, category_errors[category]))
                print(f"  ‚ùå {cat_name}: {stats['success']}/{stats['total']} ({success_rate:.1f}%)")

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if problematic_categories:
            print(f"\nüö® –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö –ü–û –ü–†–û–ë–õ–ï–ú–ù–´–ú –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")

            for cat_name, stats, errors in problematic_categories:
                print(f"\nüìã {cat_name}:")

                # –¢–∏–ø—ã –æ—à–∏–±–æ–∫
                error_types = []
                for error_type, count in errors.items():
                    if count > 0:
                        error_names = {
                            'sql_error': '–û—à–∏–±–∫–∏ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                            'no_sql_extracted': '–ù–µ –∏–∑–≤–ª–µ—á–µ–Ω SQL',
                            'exception': '–ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã'
                        }
                        error_types.append(f"{error_names.get(error_type, error_type)}: {count}")

                if error_types:
                    print(f"    –¢–∏–ø—ã –æ—à–∏–±–æ–∫: {', '.join(error_types)}")

                # –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
                print(f"    –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
                for failed_test in stats['failed_tests']:
                    status_icons = {
                        'sql_error': 'üî¥',
                        'no_sql_extracted': 'üü°',
                        'exception': 'üí•'
                    }
                    icon = status_icons.get(failed_test['status'], '‚ùì')
                    print(f"      {icon} –¢–µ—Å—Ç #{failed_test['test_id']}: {failed_test['question']}")

        # –°–≤–æ–¥–∫–∞
        total_categories = len(category_stats)
        perfect_count = len(perfect_categories)

        print(f"\nüìä –°–í–û–î–ö–ê:")
        print(f"  –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
        print(f"  –ò–¥–µ–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (100%): {perfect_count}")
        print(f"  –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(problematic_categories)}")

        if perfect_count == total_categories:
            print(f"  üéâ –í–°–ï –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        else:
            print(f"  ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ {len(problematic_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

    def _print_average_metrics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
        successful_results = [r for r in self.test_results if r['status'] == 'success']

        if successful_results:
            avg_similarity = sum(r['similarity_score'] for r in successful_results) / len(successful_results)
            avg_time = sum(r['execution_time'] for r in successful_results) / len(successful_results)

            print(f"\n‚ö° –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
            print(f"  –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å SQL: {avg_similarity:.1f}%")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_time:.2f}—Å")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ö–æ–∂–µ—Å—Ç–∏
            if avg_similarity < 85:
                print(f"  üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—Ö–æ–∂–µ—Å—Ç—å {avg_similarity:.1f}% –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç")
                print(f"     —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è SQL –∑–∞–ø—Ä–æ—Å—ã")

    def _print_failed_tests(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        failed_tests = [r for r in self.test_results if r['status'] != 'success']

        if failed_tests:
            print(f"\n‚ùå –î–ï–¢–ê–õ–ò –ù–ï–£–°–ü–ï–®–ù–´–• –¢–ï–°–¢–û–í:")
            for result in failed_tests:
                print(f"\n–¢–µ—Å—Ç #{result['test_id']}: {result['question']}")
                print(f"  –°—Ç–∞—Ç—É—Å: {result['status']}")
                if result.get('error'):
                    print(f"  –û—à–∏–±–∫–∞: {result['error']}")
                if result.get('generated_sql'):
                    print(f"  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL: {result['generated_sql']}")
                print(f"  –û–∂–∏–¥–∞–µ–º—ã–π SQL: {result['expected_sql']}")

    def _print_error_analysis(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫"""
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –û–®–ò–ë–û–ö:")

        error_analysis = {}
        for result in self.test_results:
            if result['status'] != 'success':
                status = result['status']
                if status not in error_analysis:
                    error_analysis[status] = []
                error_analysis[status].append(result)

        if not error_analysis:
            print("  ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            return

        for error_type, failed_tests in error_analysis.items():
            error_names = {
                'sql_error': 'üî¥ –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL',
                'no_sql_extracted': 'üü° –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å SQL',
                'exception': 'üí• –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è'
            }

            print(f"\n{error_names.get(error_type, error_type)} ({len(failed_tests)} —Ç–µ—Å—Ç–æ–≤):")

            for test in failed_tests:
                print(f"  ‚Ä¢ –¢–µ—Å—Ç #{test['test_id']}: {test['question']}")
                if test.get('error'):
                    print(f"    –û—à–∏–±–∫–∞: {test['error'][:100]}...")
                if test.get('generated_sql'):
                    print(f"    SQL: {test['generated_sql'][:80]}...")

    def _print_success_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í:")

        successful_tests = [r for r in self.test_results if r['status'] == 'success']

        if not successful_tests:
            print("  ‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        query_patterns = {}
        for test in successful_tests:
            sql = test.get('generated_sql', '').upper()

            if 'GROUP BY' in sql:
                pattern = '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞'
            elif 'COUNT(' in sql and 'CASE WHEN' in sql:
                pattern = '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã'
            elif 'AVG(' in sql or 'MIN(' in sql or 'MAX(' in sql:
                pattern = '–ê–≥—Ä–µ–≥–∞—Ü–∏—è'
            elif 'WHERE' in sql and 'ORDER BY' in sql:
                pattern = '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π'
            elif 'ORDER BY' in sql:
                pattern = '–ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞'
            else:
                pattern = '–î—Ä—É–≥–æ–µ'

            if pattern not in query_patterns:
                query_patterns[pattern] = 0
            query_patterns[pattern] += 1

        print("  –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
        for pattern, count in sorted(query_patterns.items(), key=lambda x: x[1], reverse=True):
            percentage = count / len(successful_tests) * 100
            print(f"    ‚Ä¢ {pattern}: {count} —Ç–µ—Å—Ç–æ–≤ ({percentage:.1f}%)")

    def save_results_to_file(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"test_results_{timestamp}.txt"

        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("=" * 70 + "\n\n")

            for result in self.test_results:
                f.write(f"–¢–µ—Å—Ç #{result['test_id']}: {result['question']}\n")
                f.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}\n")
                f.write(f"–°—Ç–∞—Ç—É—Å: {result['status']}\n")
                f.write(f"–û–∂–∏–¥–∞–µ–º—ã–π SQL: {result['expected_sql']}\n")

                if result.get('generated_sql'):
                    f.write(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL: {result['generated_sql']}\n")
                if result.get('similarity_score'):
                    f.write(f"–°—Ö–æ–∂–µ—Å—Ç—å: {result['similarity_score']:.1f}%\n")
                if result.get('execution_time'):
                    f.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['execution_time']:.2f}—Å\n")
                if result.get('error'):
                    f.write(f"–û—à–∏–±–∫–∞: {result['error']}\n")

                f.write("-" * 50 + "\n")

        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.conn:
            self.conn.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SQL –ì–ï–ù–ï–†–ê–¶–ò–ò")
    print("=" * 70)

    tester = SQLTester()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if not tester.setup():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
        return

    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        tester.run_all_tests()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        tester.generate_report()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        save_results = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª? (y/n): ").lower()
        if save_results == 'y':
            tester.save_results_to_file()

        # –û–ø—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        while True:
            test_input = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
            if test_input.lower() == 'q':
                break

            try:
                test_id = int(test_input)
                test_case = next((t for t in TEST_CASES if t['id'] == test_id), None)

                if test_case:
                    result = tester.run_single_test(test_case)
                    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ #{test_id}:")
                    print(f"–û–∂–∏–¥–∞–µ–º—ã–π SQL: {result['expected_sql']}")
                    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL: {result.get('generated_sql', '–ù–µ –∏–∑–≤–ª–µ—á–µ–Ω')}")
                    print(f"–°—Ç–∞—Ç—É—Å: {result['status']}")
                    if result.get('similarity_score'):
                        print(f"–°—Ö–æ–∂–µ—Å—Ç—å: {result['similarity_score']:.1f}%")
                else:
                    print(f"‚ùå –¢–µ—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º {test_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞")

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        tester.cleanup()
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()