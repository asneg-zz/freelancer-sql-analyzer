"""
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import re


class SQLSecurityValidator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã (DDL –∏ DML –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    FORBIDDEN_KEYWORDS = [
        # DDL –æ–ø–µ—Ä–∞—Ü–∏–∏
        'DROP', 'CREATE', 'ALTER', 'TRUNCATE', 'RENAME',
        # DML –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        'INSERT', 'UPDATE', 'DELETE', 'REPLACE', 'MERGE',
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        'GRANT', 'REVOKE', 'COMMIT', 'ROLLBACK', 'SAVEPOINT',
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        'PRAGMA', 'ATTACH', 'DETACH', 'VACUUM', 'REINDEX',
        # –û–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        'EXEC', 'EXECUTE', 'CALL'
    ]

    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
    ALLOWED_KEYWORDS = [
        'SELECT', 'WITH', 'UNION', 'INTERSECT', 'EXCEPT'
    ]

    # –û–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    DANGEROUS_PATTERNS = [
        r';\s*(DROP|DELETE|UPDATE|INSERT|CREATE|ALTER)',  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        r'--\s*',  # SQL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–º–æ–≥—É—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥)
        r'/\*.*?\*/',  # –ë–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        r'UNION\s+ALL\s+SELECT.*FROM\s+sqlite_master',  # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å—Ö–µ–º—É
        r'sqlite_master',  # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
        r'sqlite_sequence',
        r'sqlite_temp_master',
        r'LOAD_EXTENSION',  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        r'randomblob\s*\(',  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        r'hex\s*\(',
        r'char\s*\(',
    ]

    @classmethod
    def is_query_safe(cls, sql_query):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å SQL –∑–∞–ø—Ä–æ—Å–∞

        Args:
            sql_query (str): SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            tuple: (is_safe: bool, error_message: str or None)
        """
        if not sql_query or not isinstance(sql_query, str):
            return False, "–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å"

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å
        normalized_query = sql_query.strip().upper()

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized_query = re.sub(r'\s+', ' ', normalized_query)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        first_word = normalized_query.split()[0] if normalized_query.split() else ""

        if first_word not in cls.ALLOWED_KEYWORDS:
            if first_word in cls.FORBIDDEN_KEYWORDS:
                return False, f"–ó–∞–ø—Ä–µ—â–µ–Ω–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {first_word}"
            else:
                return False, f"–ù–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è SQL –∫–æ–º–∞–Ω–¥–∞: {first_word}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–∏—Å–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
        for keyword in cls.FORBIDDEN_KEYWORDS:
            # –ò—â–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ (—Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏)
            pattern = r'\b' + keyword + r'\b'
            if re.search(pattern, normalized_query):
                return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {keyword}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü–æ–∏—Å–∫ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for pattern in cls.DANGEROUS_PATTERNS:
            if re.search(pattern, normalized_query, re.IGNORECASE | re.DOTALL):
                return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π)
        statements = [stmt.strip() for stmt in sql_query.split(';') if stmt.strip()]
        if len(statements) > 1:
            return False, "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
        injection_patterns = [
            r"'\s*;\s*",  # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–≤—ã—á–∫–∏ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
            r'"\s*;\s*',  # –¢–æ –∂–µ —Å –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
            r"'\s*(OR|AND)\s*'",  # –ü—Ä–æ—Å—Ç—ã–µ –±—É–ª–µ–≤—ã –∏–Ω—ä–µ–∫—Ü–∏–∏
            r'"\s*(OR|AND)\s*"',
            r"'\s*OR\s+1\s*=\s*1",  # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏–Ω—ä–µ–∫—Ü–∏–∏
            r"'\s*OR\s+TRUE",
            r"1\s*=\s*1\s*--",
        ]

        for pattern in injection_patterns:
            if re.search(pattern, sql_query, re.IGNORECASE):
                return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏"

        return True, None

    @classmethod
    def validate_and_clean_query(cls, sql_query):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å

        Args:
            sql_query (str): –ò—Å—Ö–æ–¥–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å

        Returns:
            tuple: (cleaned_query: str or None, error_message: str or None)
        """
        is_safe, error_msg = cls.is_query_safe(sql_query)

        if not is_safe:
            return None, error_msg

        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        cleaned_query = sql_query.strip()

        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        cleaned_query = re.sub(r'--.*$', '', cleaned_query, flags=re.MULTILINE)
        cleaned_query = re.sub(r'/\*.*?\*/', '', cleaned_query, flags=re.DOTALL)

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned_query = re.sub(r'\s+', ' ', cleaned_query).strip()

        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ
        cleaned_query = cleaned_query.rstrip(';')

        return cleaned_query, None

    @classmethod
    def get_security_info(cls):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        Returns:
            str: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        return f"""
üîí –ü–†–ê–í–ò–õ–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò SQL:

‚úÖ –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:
- SELECT (–≤—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
- WITH (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
- UNION, INTERSECT, EXCEPT (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)

‚ùå –ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:
- –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: INSERT, UPDATE, DELETE, REPLACE
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: CREATE, DROP, ALTER, TRUNCATE
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ: GRANT, REVOKE, PRAGMA
- –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã

üõ°Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
- –ó–∞–ø—Ä–µ—â–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—á–µ—Ä–µ–∑ ;)
- –ë–ª–æ–∫–∏—Ä—É—é—Ç—Å—è SQL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∏ SQL –∏–Ω—ä–µ–∫—Ü–∏–π
- –ó–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º SQLite

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ß–¢–ï–ù–ò–Ø –¥–∞–Ω–Ω—ã—Ö!
        """


def test_security_validator():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    """
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò SQL")
    print("=" * 50)

    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    safe_queries = [
        "SELECT * FROM freelancer_earnings LIMIT 10",
        "SELECT COUNT(*) FROM freelancer_earnings WHERE Experience_Level = 'Expert'",
        "SELECT Platform, AVG(Earnings_USD) FROM freelancer_earnings GROUP BY Platform",
        "WITH top_earners AS (SELECT * FROM freelancer_earnings ORDER BY Earnings_USD DESC LIMIT 10) SELECT * FROM top_earners"
    ]

    # –û–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    dangerous_queries = [
        "DROP TABLE freelancer_earnings",
        "DELETE FROM freelancer_earnings WHERE id = 1",
        "INSERT INTO freelancer_earnings VALUES (1, 'test')",
        "UPDATE freelancer_earnings SET Earnings_USD = 0",
        "SELECT * FROM freelancer_earnings; DROP TABLE freelancer_earnings;",
        "SELECT * FROM sqlite_master",
        "SELECT * FROM freelancer_earnings WHERE name = 'test'; --",
        "SELECT * FROM freelancer_earnings WHERE id = 1 OR 1=1",
        "CREATE TABLE test (id INT)",
        "ALTER TABLE freelancer_earnings ADD COLUMN test VARCHAR(100)",
        "PRAGMA table_info(freelancer_earnings)"
    ]

    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–´–• –ó–ê–ü–†–û–°–û–í:")
    for i, query in enumerate(safe_queries, 1):
        is_safe, error = SQLSecurityValidator.is_query_safe(query)
        status = "‚úÖ –ë–ï–ó–û–ü–ê–°–ï–ù" if is_safe else f"‚ùå –û–ü–ê–°–ï–ù: {error}"
        print(f"{i}. {status}")
        print(f"   –ó–∞–ø—Ä–æ—Å: {query[:50]}...")

    print(f"\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ê–°–ù–´–• –ó–ê–ü–†–û–°–û–í:")
    for i, query in enumerate(dangerous_queries, 1):
        is_safe, error = SQLSecurityValidator.is_query_safe(query)
        status = "‚úÖ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù" if not is_safe else "‚ùå –ü–†–û–ü–£–©–ï–ù (–û–®–ò–ë–ö–ê!)"
        print(f"{i}. {status}")
        if not is_safe:
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {error}")
        print(f"   –ó–∞–ø—Ä–æ—Å: {query[:50]}...")


if __name__ == "__main__":
    test_security_validator()