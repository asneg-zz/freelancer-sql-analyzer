"""
–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQL –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

import re
import sqlite3


def extract_sql_query(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ GigaChat
    """
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º SQL –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    sql_match = re.search(r'```(?:sql)?\s*(.*?)\s*```', text, re.DOTALL | re.IGNORECASE)
    if sql_match:
        return sql_match.group(1).strip().rstrip(';')

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞, –∏—â–µ–º SQL –∫–æ–º–∞–Ω–¥—ã
    for keyword in ['SELECT', 'INSERT', 'UPDATE', 'DELETE']:
        pattern = f'({keyword}.*?)(?:;|$)'
        match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
        if match:
            return match.group(1).strip().rstrip(';')

    return None


def execute_sql_safely(conn, query):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å
    """
    try:
        cursor = conn.cursor()
        cursor.execute(query)

        if query.upper().strip().startswith('SELECT'):
            results = cursor.fetchall()
            columns = [desc[0] for desc in cursor.description] if cursor.description else []
            return True, results, columns
        else:
            conn.commit()
            return True, cursor.rowcount, []
    except Exception as e:
        return False, str(e), []


def normalize_sql(sql):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    if not sql:
        return ""

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    normalized = re.sub(r'\s+', ' ', sql.strip().rstrip(';'))

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = ['SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING',
                'LIMIT', 'AS', 'AND', 'OR', 'CASE', 'WHEN', 'THEN', 'END']

    for keyword in keywords:
        normalized = re.sub(f'\\b{keyword}\\b', keyword, normalized, flags=re.IGNORECASE)

    return normalized.strip()


def compare_sql_queries(generated_sql, expected_sql, table_name):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –æ–∂–∏–¥–∞–µ–º—ã–π SQL –∑–∞–ø—Ä–æ—Å—ã
    """
    gen_norm = normalize_sql(generated_sql).lower()
    exp_norm = normalize_sql(expected_sql).lower()

    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if gen_norm == exp_norm:
        return "exact_match", 100

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    elements = {
        'select': 15,
        f'from {table_name.lower()}': 15,
        'where': 10,
        'group by': 10,
        'order by': 10,
        'limit': 5,
        'count': 10,
        'avg': 10,
        'sum': 10,
        'round': 5
    }

    score = 0
    max_score = sum(elements.values())

    for element, weight in elements.items():
        if element in gen_norm and element in exp_norm:
            score += weight

    similarity_percent = min(100, (score / max_score) * 100)

    if similarity_percent >= 80:
        return "high_similarity", similarity_percent
    elif similarity_percent >= 60:
        return "medium_similarity", similarity_percent
    else:
        return "low_similarity", similarity_percent


def format_sql_results(success, results, columns, query, limit_rows=20):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞
    """
    if not success:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞: {results}"

    output = [f"\nüìù SQL –∑–∞–ø—Ä–æ—Å: {query}"]

    if query.upper().strip().startswith('SELECT'):
        if not results:
            output.append("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            output.append("\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:")
            output.append("-" * 50)

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            if columns:
                header = " | ".join(columns)
                output.append(header)
                output.append("-" * len(header))

            # –î–∞–Ω–Ω—ã–µ
            for i, row in enumerate(results[:limit_rows]):
                output.append(" | ".join(str(item) for item in row))

            if len(results) > limit_rows:
                output.append(f"... –∏ –µ—â—ë {len(results) - limit_rows} —Å—Ç—Ä–æ–∫")

            output.append(f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
    else:
        output.append(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –∑–∞–ø–∏—Å–µ–π: {results}")

    return "\n".join(output)