import sqlite3
import pandas as pd
import os
from langchain_core.messages import HumanMessage, SystemMessage
from authorization import authorization_gigachat
from prompt_builder import PromptBuilder
from sql_utils import extract_sql_query, execute_sql_safely, format_sql_results


def create_database_and_load_data():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    if not os.path.exists('freelancer_earnings_bd.csv'):
        print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª freelancer_earnings_bd.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    conn = sqlite3.connect('freelancer_earnings.db')
    try:
        df = pd.read_csv('freelancer_earnings_bd.csv')
        df.to_sql('freelancer_earnings', conn, if_exists='replace', index=False)
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π.")
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.close()
        return None


def main():
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = create_database_and_load_data()
    if not conn:
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PromptBuilder –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–æ–≤
    print("\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
    prompt_builder = PromptBuilder('freelancer_earnings.db', 'freelancer_earnings')

    if prompt_builder.analyze_and_prepare():
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(prompt_builder.get_table_summary())
        enhanced_system_prompt = prompt_builder.build_enhanced_system_prompt()
        print("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º—Ç")
        enhanced_system_prompt = prompt_builder.build_basic_system_prompt()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GigaChat
    try:
        giga = authorization_gigachat()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat: {e}")
        conn.close()
        return

    messages = [SystemMessage(content=enhanced_system_prompt)]

    print("\n" + "=" * 70)
    print("üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê SQL-–ó–ê–ü–†–û–°–û–í –ì–û–¢–û–í–ê!")
    print("=" * 70)
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:")
    print("‚Ä¢ 'help' - —Å–ø—Ä–∞–≤–∫–∞")
    print("‚Ä¢ 'schema' - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã")
    print("‚Ä¢ 'examples' - –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚Ä¢ 'suggest <—Ç–µ–∫—Å—Ç>' - —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print("‚Ä¢ 'validate <—Ç–µ–∫—Å—Ç>' - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞")
    print("‚Ä¢ '–ø–æ–∫–∞' - –≤—ã—Ö–æ–¥")
    print("-" * 70)

    while True:
        user_input = input("\nüí¨ –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()

        if user_input.lower() in ['–ø–æ–∫–∞', '–≤—ã—Ö–æ–¥', 'exit', 'quit']:
            break

        if not user_input:
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if user_input.lower() in ['help', '–ø–æ–º–æ—â—å']:
            print("""
üìö –°–ü–†–ê–í–ö–ê:
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç SQL –∑–∞–ø—Ä–æ—Å  
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: help, schema, examples, suggest, validate, –ø–æ–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
‚Ä¢ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            """)
            continue

        if user_input.lower() in ['schema', '—Å—Ö–µ–º–∞']:
            print("\nüìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´:")
            print(prompt_builder.analyzer.generate_prompt_schema())
            continue

        if user_input.lower() in ['examples', '–ø—Ä–∏–º–µ—Ä—ã']:
            suggestions = prompt_builder.get_improved_suggestions()
            print("\nüí° –ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í:")
            for i, suggestion in enumerate(suggestions, 1):
                print(f"  {i}. {suggestion}")
            continue

        if user_input.lower().startswith('suggest '):
            query_text = user_input[8:]  # –£–±–∏—Ä–∞–µ–º 'suggest '
            suggestions = prompt_builder.get_improved_suggestions(query_text)
            print(f"\nüéØ –£–ú–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –î–õ–Ø '{query_text}':")
            for i, suggestion in enumerate(suggestions, 1):
                print(f"  {i}. {suggestion}")
            continue

        if user_input.lower().startswith('validate '):
            query_text = user_input[9:]  # –£–±–∏—Ä–∞–µ–º 'validate '
            validation_result = prompt_builder.validate_and_suggest(query_text)

            print(f"\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–ü–†–û–°–ê '{query_text}':")

            if validation_result['validation_passed']:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
                for warning in validation_result['warnings']:
                    print(f"  ‚Ä¢ {warning}")

            if validation_result['suggestions']:
                print("\nüí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ó–ê–ü–†–û–°–´:")
                for i, suggestion in enumerate(validation_result['suggestions'], 1):
                    print(f"  {i}. {suggestion}")
            continue

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫ GigaChat
        if prompt_builder.is_analyzed:
            validation_result = prompt_builder.validate_and_suggest(user_input)

            if not validation_result['validation_passed']:
                print("\nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–ü–†–û–°–ê:")
                for warning in validation_result['warnings']:
                    print(f"  ‚Ä¢ {warning}")

                if validation_result['suggestions']:
                    print("\n‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô SQL:")
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    recommended_query = validation_result['suggestions'][0]
                    print(f"  {recommended_query}")

                    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –Ω–∞ –≥–æ—Ç–æ–≤—ã–π SQL –∑–∞–ø—Ä–æ—Å
                    user_input = f"–í—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç SQL –∑–∞–ø—Ä–æ—Å: {recommended_query}"
                    print("\nüöÄ –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!")

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append(HumanMessage(content=user_input))
            print("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞—é SQL...")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
            response = giga.invoke(messages)
            messages.append(response)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å
            sql_query = extract_sql_query(response.content)

            if sql_query:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                success, results, columns = execute_sql_safely(conn, sql_query)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                output = format_sql_results(success, results, columns, sql_query)
                print(output)

            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å SQL –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—Ç–≤–µ—Ç–∞.")
                print(f"ü§ñ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.content}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    user_queries = len([m for m in messages if isinstance(m, HumanMessage)])
    print(f"\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_queries}")
    conn.close()
    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    main()